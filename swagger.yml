swagger: '2.0'

info:
  version: 1.0.0
  title: TMS course users and pets REST API.
  description: TMS test project `users and pets REST API`. 
    You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net](http://swagger.io/irc/).

host: localhost:3000
basePath: /api

tags:
  - name: auth
    description: register and login user

  - name: users
    description: users CRUD operations 

  - name: pets
    description: pets CRUD operations 

schemes:
- http

paths:
  /auth/regeister:
    post:
      tags:
      - auth
      summary: Register new user
      description: Create new user un DB
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to create.
          required: true
          schema:
            type: object
            required:
              - userName
              - email
              - password
            properties:
              userName:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: Created
          schema:
            "$ref": "#/definitions/User"
        400:
          description: Bad request
        500:
          description: Internal server error

  /auth/login:
    post:
      tags:
      - auth
      summary: Login user
      consumes:
        - application/json
      description: ''
      parameters:
        - in: body
          name: user
          description: User to create.
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Success
        401:
          description: Unauthorized
        500:
          description: Internal server error
  
  /users:
    get:
      tags:
      - users
      summary: Get all users
      description: Returns all users from DB
      produces:
      - application/json
      parameters:
      - name: limit
        in: query
        description: The number of users to select in result
        required: false
        type: integer
        format: int64
      - name: offset
        in: query
        description: The number of users to skip in result
        required: false
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/User"
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error
  
  /users/{userId}:
    get:
      tags:
      - users
      summary: Get user by ID
      description: Get user from DB
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/User"
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error

    put:
      tags:
      - users
      summary: Update user by id
      consumes:
        - application/json
      description: ''
      parameters:
      - name: userId
        in: path
        description: Id of user to update
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          type: object
          required:
            - userName
          properties:
            userName:
              type: string
      responses:
        200:
          description: Success
          schema:
            "$ref": "#/definitions/User"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error

    delete:
      tags:
      - users
      summary: Delete user by id
      consumes:
        - application/json
      parameters:
      - name: userId
        in: path
        description: Id of user to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              userId:
                type: integer
                format: int64
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error

  /pets:
    post:
      tags:
      - pets
      summary: Create new pet
      consumes:
      - application/json
      parameters:
        - in: body
          name: pet
          description: Pet to create.
          required: true
          schema:
            type: object
            required:
              - petName
              - age
            properties:
              petName:
                type: string
              age:
                type: integer
                format: int64
      responses:
        201:
          description: Created
          schema:
            "$ref": "#/definitions/Pet"
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error
    get:
      tags:
      - pets
      summary: Get all pets
      description: Returns all pets from DB
      produces:
      - application/json
      parameters:
      - name: limit
        in: query
        description: The number of pets to select in result
        required: false
        type: integer
        format: int64
      - name: offset
        in: query
        description: The number of pets to skip in result
        required: false
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Pet"
        400:
          description: Bad request
        500:
          description: Internal server error
  
  /pets/{petId}:
    get:
      tags:
      - pets
      summary: Get pet by ID
      description: Get pet from DB
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/Pet"
        404:
          description: Pet not found
        500:
          description: Internal server error

    put:
      tags:
      - pets
      summary: Update pet by id
      consumes:
        - application/json
      description: ''
      parameters:
      - name: userId
        in: path
        description: Id of user to update
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          type: object
          required:
            - petName
            - age
          properties:
            petName:
              type: string
            age:
              type: integer
              format: int64
      responses:
        200:
          description: Success
          schema:
            "$ref": "#/definitions/Pet"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Pet not found
        500:
          description: Internal server error

    delete:
      tags:
      - pets
      summary: Delete pet by id
      consumes:
        - application/json
      parameters:
      - name: petId
        in: path
        description: Id of pet to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              petId:
                type: integer
                format: int64
        401:
          description: Unauthorized
        404:
          description: Pet not found
        500:
          description: Internal server error

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      userName:
        type: string
      email:
        type: string
      photo:
        type: string

  Pet:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petName:
        type: string
      age:
        type: integer
        format: int64
      photo:
        type: string
    xml:
      name: User
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
